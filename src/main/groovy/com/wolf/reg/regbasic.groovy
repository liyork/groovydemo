package com.wolf.reg
//正则表达式30分钟入门教程
//多练习，多使用，才能熟练掌握正则表达式
//正则表达式用于描述一些规则，之后可以进行匹配字符

// 1. 入门
// 精确匹配,由两个字符组成，前一个字符是h,后一个是i
assert 'hi' ==~ /hi/

println 'hia' ==~ /hi/
println 'hia' ==~ /\bhi\b/
// 精确地查找hi这个单词
// \b是元字符，代表单词的分界处,只匹配一个位置，表示之前或之后不能有其他
println 'hia' ==~ /\bhi\b/

// hi后面跟着一个Lucy，先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词  --换行符是'\n',ASCII编码为10(十六进制0x0A)的字符。
println 'hi Lucy' ==~ /\bhi\b.*\bLucy\b/

// 0\d\d-\d\d\d\d\d\d\d\d：匹配以0开头，然后是两个数字，然后是一个连字号“-”(不是元字符)，最后是8个数字
// 0\d{2}-\d{8}。这里\d后面的{2}的意思是前面\d必须连续重复匹配2次

//常用的元字符
//代码	说明
//.	匹配除换行符以外的任意字符
//* 代表的是数量——它指定*前边的内容可以连续重复使用0~任意次，如：.*连在一起就意味着任意数量的不包含换行的字符
//\w	匹配字母或数字或下划线或汉字
//\s	匹配任意的空白符
//\d	匹配数字
//\b	匹配单词的开始或结束
//^	匹配字符串的开始
//$	匹配字符串的结束

// 匹配以字母a开头的单词
// \ba\w*\b——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)。
// \d+匹配1个或更多连续的数字。+匹配重复1次或更多次
// \b\w{6}\b 匹配刚好6个字符的单词

// 元字符^和$都匹配一个位置。^匹配要用来查找的字符串的开头，$匹配结尾。
//匹配5 位到12位数字
//^ \ d { 5 , 12 } $
//因为使用了 ^ 和$ ， 所以输入的整个字符串都要用来和 \ d { 5 , 12 } 来匹配 ， 也就是说整个输入必须是5到12个数字-- 必须是整体都匹配 ， 因为用了 ^ $
//有些正则表达式处理工具还有一个处理多行的选项(? m) 。 如果选中了这个选项 ， ^ 和$的意义就变成了每个匹配行的开始处和结束处 。

// 2. 字符转义
//查找元字符本身的话 ， 如查找., 或者 * ， 使用 \ 来取消这些字符本身的特殊意义 。
//使用 \.和 \ * 。 要查找 \ 本身则要用 \ \.

// 3.重复
// 常用的限定符(指定数量)
//代码	说明
//*	重复零次或更多次
//+	重复一次或更多次
//?	重复零次或一次
//{n}	重复n次
//{n,}	重复n次或更多次
//{n,m}	重复n到m次

//匹配Windows后面跟1个或更多数字
//Windows\d+
//^\w+匹配一行的第一个单词

// 4.字符类
//匹配任何一个英文元音字母
//[aeiou]
//匹配标点符号.或?或!
//[.?!]
//一位数字
//[0-9]代表的含意与\d就是完全一致的
//[a-z0-9A-Z_]也完全等同于\w
//
//一个转义字符\(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。
//\(?0\d{2}[) -]?\d{8}
//这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。

// 5. 分枝条件
//\(?0\d{2}[) -]?\d{8}
//也能匹配010)12345678或(022-87654321
//
//要解决这个问题，我们需要用到分枝条件。指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，用|把不同的规则分隔开
//
//0\d{2}-\d{8}|0\d{3}-\d{7}
//这个表达式能匹配两种以连字号分隔的电话号码：
//一种是三位区号，8位本地号(如010-12345678)，
//一种是4位区号，7位本地号(0376-2233445)
//
//\(0\d{2}\)[- ]?\d{8}|0\d{2}[- ]?\d{8}
//这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔

//\d{5}-\d{4}|\d{5}
//这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。
//
//一个问题：  这个用()解决即可
//使用分枝条件时，要注意各个条件的顺序。如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。
//原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。

//println '11111-1111' ==~ /\d{5}-\d{4}|\d{5}/ // true
//println '11111-11111' ==~ /\d{5}-\d{4}|\d{5}/ // false
//println '11111' ==~ /\d{5}-\d{4}|\d{5}/ // true,表明|进行分支，左边的\d{5}-\d{4}或者\d{5}，而不是/\d{5}-和\d{4}|\d{5}，也是啊，若是用|紧邻的左右，那么左边如何限定是多少呢，所以不能这样用
//println '11111-4444' ==~ /\d{5}-(\d{4}|\d{5})/ // 可以使用括号进行限定范围
//println '11111-55555' ==~ /\d{5}-(\d{4}|\d{5})/

//println '11111' ==~ /\d{5}|\d{5}-\d{4}/
//println '111-2222' ==~ /\d{5}|\d{3}-\d{4}/

// 6. 分组
//可以用小括号来指定子表达式(也叫做分组)，然后可以指定这个子表达式的重复次数
//(\d{1,3}\.){3}\d{1,3}
//分析它：
//\d{1,3}匹配1到3位的数字，
//(\d{1,3}\.){3}匹配三位数字加上一个英文句号(这个整体表示一个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})
//
//它也将匹配256.300.888.999这种不可能存在的IP地址。所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：
//((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。
//
//IP地址中每个数字都不能大于255,
//01.02.03.04 这样前面带有0的数字, 也是正确, IP 地址里的数字可以包含有前导0

// 7. 反义
//常用的反义代码
//代码/语法	说明
//\W	匹配任意不是字母，数字，下划线，汉字的字符
//\S	匹配任意不是空白符的字符
//\D	匹配任意非数字的字符
//\B	匹配不是单词开头或结束的位置
//[^x]	匹配除了x以外的任意字符
//[^aeiou]	匹配除了aeiou这几个字母以外的任意字符
//
//匹配不包含空白符的字符串
//\S+
//匹配用尖括号括起来的以a开头的字符串
//<a[^>]+>

// 8. 后向引用
//使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。
//默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推

//分组0对应整个正则表达式匹配到的所有内容
//实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号
//你可以使用(?:exp)语法不对这个分组分配组号

//后向引用用于重复搜索前面某个分组匹配的文本。
//可以用来匹配重复的单词，像go go, 或者kitty kitty。\1代表分组1匹配的文本
//\b(\w+)\b\s+\1\b
//分析：这个表达式首先是一个单词，也就是单词开始处和结束处之间的，多于一个的字母或数字(\b(\w+)\b)， 这个单词会被捕获到编号为1的分组中，
//然后是1个或几个空白符(\s+)，
//最后是分组1中捕获的内容,也就是前面匹配的那个单词(\1)
//
//指定一个子表达式的组名语法：
//(?<Word>\w+) 或者(?'Word'\w+)
//这样就把\w+的组名指定为Word了。
//当要反向引用这个分组捕获的内容，可以使用\k<Word>,
//上一个例子也可以写成这样：\b(?<Word>\w+)\b\s+\k<Word>\b

//例如：
//println 'abcdeabc' ==~ /(abc)de\1/
//println 'abcdeabc' ==~ /(?<xxxx>abc)de\k<xxxx>/

//(?:exp)这样的组匹配的内容不会被捕获到某个组里面，也不会拥有组号
//println 'abcdeabc' ==~ /(?:abc)de\1/  // 不能使用\1了，因为没有捕获


// 9. 零宽断言
//接下来的四个正则，用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，
//这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言
//断言:用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配，否则就停止
//
//(?=exp)叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。即以exp结尾
//比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分，
//def matcher = "I'm singing while you're dancing" =~ /\b\w+(?=ing\b)/
//println matcher[0, -1]
//matcher = "I'm singing while you're dancing" =~ /\b\w+(ing\b)/ // 作为对比
//println matcher[0, -1]

//(?<=exp)叫零宽度正回顾后发断言，它断言自身出现的位置的前部分能匹配表达式exp。即以exp开头
//比如(?<=\bre)\w+\b会匹配以re开头的单词的*后半部分*，例如在查找时，它匹配ading。
//def matcher = 'reading a book' =~ /(?<=\bre)\w+\b/
//println matcher[0,-1]

//假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：
//((?<=\d)\d{3})+\b，
//用它对1234567890进行查找时结果是234567890。  // 这个以(?<=\d)开头，似乎是从后向前查找?
//def matcher = '1234567890' =~ /((?<=\d)\d{3})+\b/
//println matcher[0, -1]

//下面这个例子同时使用了这两种断言：
//  以\s开头 \d+ 以\s结尾
// (?<=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)
//def matcher = ' 123 456 ' =~ /(?<=\s)\d+(?=\s)/
//println matcher[0, -1]

// 10. 负向零宽断言
//场景：如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？
//例如，想要一个单词，它里面出现了字母q,但是q后面跟的不是字母u：\b\w*q[^u]\w*\b，这可以匹配包含字母q后面不是字母u的单词。
//但是如果多做测试，会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错，因为[^u]总要匹配一个字符。
//如果q是单词的最后一个字符，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它)，后面的\w*\b将会匹配下一个单词，
// 于是\b\w*q[^u]\w*\b就能匹配整个Iraq fighting。
//def matcher = 'Iraq fighting' =~ /\b\w*q[^u]\w*\b/ // 错误
//println matcher[-1, 0]

//负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符，断言那个位置，不符合则退出
//可以用：\b\w*q(?!u)\w*\b。
//def matcher = 'Iraq fighting' =~ /\b\w*q(?!u)\w*\b/  // 断言q后面的位置(?!u)不能是u，若断言成功则继续否则停止
//println matcher[-1, 0]

//零宽度负预测先行断言(?!exp)，断言此位置不能匹配表达式exp。
//例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；
//\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。

//可以用(?<!exp)零宽度负回顾后发断言，来断言此位置的前面不能匹配表达式exp
//如：(?<![a-z])\d{7}匹配前面不是小写字母的七位数字。

//更复杂的例子：(?<=<(\w+)>).*(?=<\/\1>)
//匹配不包含属性的简单HTML标签内里的内容。
//(?<=<(\w+)>)指定了这样的前缀：被尖括号括起来的单词(比如可能是<b>)，
//然后是.*(任意的字符串),
//最后是一个后缀(?=<\/\1>)。注意后缀里的\/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，即前面的(\w+)匹配的内容，
//这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。

// 11. 常用分组语法
//分类	代码/语法	说明
//捕获	(exp)	匹配exp,并捕获文本到自动命名的组里
//(?<name>exp)	匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)
//(?:exp)	匹配exp,不捕获匹配的文本，也不给此分组分配组号
//零宽断言	(?=exp)	匹配exp前面的位置
//(?<=exp)	匹配exp后面的位置
//(?!exp)	匹配后面跟的不是exp的位置
//(?<!exp)	匹配前面不是exp的位置
//注释	(?#comment)	这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读

// 12. 注释
//小括号的另一种用途是通过语法(?#comment)来包含注释
//例如：2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)
//要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。
//启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。
//例如，我们可以将表达式：。
//改写成：
//(?<=    # 断言要匹配的文本的前缀
//        <(\w+)> # 查找尖括号括起来的内容
//# (即HTML/XML标签)
//)       # 前缀结束
//.*      # 匹配任意文本
//(?=     # 断言要匹配的文本的后缀
//        <\/\1>  # 查找尖括号括起来的内容
//              # 查找尖括号括起来的内容
//      )       # 后缀结束

// 13. 贪婪与懒惰
//贪婪匹配:
//当正则表达式中包含重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。
//例：a.*b，它将会匹配以a开始，以b结束的字符串，最长的字符串。
//如果用它来搜索aabab的话，它会匹配整个字符串aabab。
//
//懒惰匹配，也就是匹配尽可能少的字符。
//在限定符后面加上一个问号?。
//这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复
//
//a.*?b匹配最短的，以a开始，以b结束的字符串
//应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。
//为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？
//简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配(从左到右)拥有最高的优先权——The match that begins earliest wins。
//
//懒惰限定符
//代码/语法	说明
//*?	重复任意次，但尽可能少重复
//+?	重复1次或更多次，但尽可能少重复
//??	重复0次或1次，但尽可能少重复
//{n,m}?	重复n到m次，但尽可能少重复
//{n,}?	重复n次以上，但尽可能少重复

// 14. 常用的操作选项
//名称	说明
//IgnoreCase(忽略大小写)	匹配时不区分大小写。
//Multiline(多行模式)	更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)
//Singleline(单行模式)	更改.的含义，使它与每一个字符匹配（包括换行符\n）。
//IgnorePatternWhitespace(忽略空白)	忽略表达式中的非转义空白并启用由#标记的注释。
//ExplicitCapture(显式捕获)	仅捕获已被显式命名的组。

// 可以使用Regex(String, RegexOptions)构造函数来设置正则表达式的处理选项。如：Regex regex = new Regex(@"\ba\w{6}\b", RegexOptions.IgnoreCase);

// 是不是只能同时使用多行模式和单行模式中的一种？
// 不是的，这两个选项之间没有任何关系，除了它们的名字比较相似以外。事实上，为了避免混淆，在最新的 JavaScript 中，单行模式其实名叫 dotAll，意为点可以匹配所有字符，然而在指定该选项时，用的还是 Singleline 的首字母 s.

// 15.平衡组/递归匹配
//有时我们需要匹配像(100 * (50 + 15)) 这样的可嵌套的层次性结构 ，
//这时简单地使用 \ (.+ \ ) 则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式 ， 懒惰模式也有下面的问题) 。
//假如原来的字符串里的左括号和右括号出现的次数不相等 ， 比如(5 / (3 + 2)) ) ， 那我们的匹配结果里两者的个数也不会相等(一般贪婪时就是最后一个右括号) 。
//有没有办法在这样的字符串里匹配到最长的，也配对的括号之间的内容呢 ？
//
//问题变成了如何把xx <aa <bbb> <bbb> aa> yy这样的字符串里，最长的配对的尖括号内的内容捕获出来？
//
//这里需要用到以下的语法构造：
//(?'group') 把捕获的内容命名为group,并压入堆栈(Stack)
//(?'-group') 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败
//(?(group)yes|no) 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分
//(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败
//
//我们需要做的是每碰到了左括号，就在压入一个"Open",每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。
//正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。
//
//<                   #最外层的左括号
//[^<>]*            #它后面非括号的内容
//(
//        (
//                (?'Open'<)  #左括号，压入"Open"
//        [^<>]*      #左括号后面的内容
//)+
//        (
//                (?'-Open'>) #右括号，弹出一个"Open"
//        [^<>]*      #右括号后面的内容
//)+
//)*
//(?(Open)(?!))     #最外层的右括号前检查
//#若还有未弹出的"Open"
//#则匹配失败
//
//        >                #最外层的右括号
//
//平衡组的一个最常见的应用就是匹配HTML, 下面这个例子可以匹配嵌套的<div>标签：
//<div[^>]*>[^<>]*(((?'Open'<div[^>]*>)[^<>]*)+((?'-Open'</div>)[^<>]*)+)*(?(Open)(?!))</div>.

// 16. 尚未详细讨论的语法
//代码/语法	说明
//\a	报警字符(打印它的效果是电脑嘀一声)
//\b	通常是单词分界位置，但如果在字符类里使用代表退格
//\t	制表符，Tab
//\r	回车
//\v	竖向制表符
//\f	换页符
//\n	换行符
//\e	Escape
//\0nn	ASCII代码中八进制代码为nn的字符
//\xnn	ASCII代码中十六进制代码为nn的字符
//\unnnn	Unicode代码中十六进制代码为nnnn的字符
//\cN	ASCII控制字符。比如\cC代表Ctrl+C
//\A	字符串开头(类似^，但不受处理多行选项的影响)
//\Z	字符串结尾或行尾(不受处理多行选项的影响)
//\z	字符串结尾(类似$，但不受处理多行选项的影响)
//\G	当前搜索的开头
//\p{name}	Unicode中命名为name的字符类，例如\p{IsGreek}
//(?>exp)	贪婪子表达式
//(?<x>-<y>exp)	平衡组
//(?im-nsx:exp)	在子表达式exp中改变处理选项
//(?im-nsx)	为表达式后面的部分改变处理选项
//(?(exp)yes|no)	把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no
//(?(exp)yes)	同上，只是使用空表达式作为no
//(?(name)yes|no)	如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no
//(?(name)yes)	同上，只是使用空表达式作为no

// 捕获例子1
def a = '''order:SECONDARY> sh.status()
--- Sharding Status ---
ssss
active mongoses:
"1.1.1" : 1
active mongoses:
"2.2.2" : 22
'''

def b = a =~ /(?m)active mongoses:\s+"(\d\.)+\d"\s:\s(\d+)/
// 捕获的第一个整体，捕获的第二个整体
println "${b[0]}, ${b[1]}"

// 可把Matcher对象看作一个二维矩阵。
// 第1维表示每一个与模式相匹配的字符串；第2维表示每个匹配内的各个捕获组（capture group)
// 捕获例子2
def text = 'Lorem 1:30 PM ipsum dolor 12:00 PM sit amet, consectetuer adipiscing elit.'

def HOUR = '10|11|12|[0-9]'
def MINUTE = '[0-5][0-9]'
def AM_PM = 'AM|PM'
def time = /($HOUR):($MINUTE) ($AM_PM)/

def matcher = text =~ time
assert matcher[0] == ["1:30 PM", "1", "30", "PM"] //First Match
// 第一个完全匹配的，第一个捕获
assert matcher[0][0] == "1:30 PM" //First match group in the first match
assert matcher[0][1] == "1" //Second match group in the first match (HOUR)
assert matcher[0][2] == "30" //Third match group in the first match (MINUTE)
assert matcher[0][3] == "PM" //Fourth match group in the first match (AM_PM)

assert matcher[1] == ["12:00 PM", "12", "00", "PM"] //Second Match
assert matcher[1][0] == "12:00 PM" //First match group in the second match
assert matcher[1][1] == "12" //Second match group in the second match (HOUR)
assert matcher[1][2] == "00" //Third match group in the second match (MINUTE)
assert matcher[1][3] == "PM" //Fourth match group in the second match (AM_PM)

// 与String的replace*形式的方法（如replaceFirst等）结合使用
assert "Welcome To Groovy" == "Welcome 2 Groovy".replaceFirst(/\d/, "To")

// 操作每个捕获组
"Hello GROOVY, GROOVY rocks" ==
        "Hello Groovy, Groovy rocks".replaceAll("Groovy") { it -> it[0].toUpperCase() }

// 筛选集合
assert ["Groovy"] == ["Groovy", "Rocks"].grep(~/G.*/)
